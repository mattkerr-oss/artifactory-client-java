import static java.lang.System.getenv

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4+')
    }
}
//Matt test
allprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    group = 'org.jfrog.artifactory.client'
    version = currentVersion
    status = version.endsWith('-SNAPSHOT') ? 'integration' : 'release'

    project.tasks.withType(Jar).each {
        it.version = currentVersion
    }
}

artifactoryPublish.skip = true

artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        defaults {
            publications 'main'
        }
    }
}

subprojects {
    apply plugin: 'java'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    final env = getenv()
    dependencies {
        compile 'org.apache.httpcomponents:httpcore:4.4.1'
        compile 'org.apache.httpcomponents:httpclient:4.5'
        compile group: 'commons-lang', name: 'commons-lang', version: '2.3'
        compile 'com.fasterxml.jackson.core:jackson-core:2.9.5'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.6'
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar,
			javadocJar,
			jar
    }

    test {
        useTestNG()
        testLogging {
            exceptionFormat "full"
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            minGranularity 0
        }
	ignoreFailures = System.getenv("IGNORE_FAILURES") ? System.getenv("IGNORE_FAILURES").toBoolean() : false
    }

    publishing {
        publications {
            main(MavenPublication) {
                from components.java
                artifact sourcesJar
                //artifact javadocJar

                pom.withXml {
                    asNode().with {
                        appendNode('packaging', 'jar')
                        appendNode('name', 'artifactory-java-client')
                        appendNode('description', 'Java client for working with Artifactory')
                        appendNode('url', 'https://github.com/JFrogDev/artifactory-client-java')
                        appendNode('licenses').with {
                            appendNode('license').with {
                                appendNode('name', 'The Apache Software License, Version 2.0')
                                appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0')
                            }
                        }
                        appendNode('developers').with {
                            appendNode('developer').with {
                                appendNode('id', 'jbaruch')
                                appendNode('name', 'Baruch Sadogursky')
                                appendNode('email', 'jbaruch@jfrog.com')
                            }
                        }
                        appendNode('scm').with {
                            appendNode('connection', 'git@github.com:JFrogDev/artifactory-client-java.git')
                            appendNode('developerConnection', 'git@github.com:JFrogDev/artifactory-client-java.git')
                            appendNode('url', 'https://github.com/JFrogDev/artifactory-client-java')
                        }
                    }
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
            }
        }
    }
}
